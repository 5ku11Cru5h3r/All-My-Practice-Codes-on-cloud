{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"input/output": {
		"prefix": "ip/op",
		"body": [
			"// ================================== take ip/op like vector,pairs directly!==================================",
			"template<typename typC,typename typD> istream &operator>>(istream &cin,pair<typC,typD> &a) { return cin>>a.first>>a.second; }",
			"template<typename typC> istream &operator>>(istream &cin,vector<typC> &a) { for (auto &x:a) cin>>x; return cin; }",
			"template<typename typC,typename typD> ostream &operator<<(ostream &cout,const pair<typC,typD> &a) { return cout<<a.first<<' '<<a.second; }",
			"template<typename typC,typename typD> ostream &operator<<(ostream &cout,const vector<pair<typC,typD>> &a) { for (auto &x:a) cout<<x<<'\\n'; return cout; }",
			"template<typename typC> ostream &operator<<(ostream &cout,const vector<typC> &a) { int n=a.size(); if (!n) return cout; cout<<a[0]; for (int i=1; i<n; i++) cout<<' '<<a[i]; return cout; }",
			"// ===================================END Of the input module =========================================="
		],
		"description": "input/output"
	},
	"coutx": {
		"prefix": "op",
		"body": [
			"cout<<$0<<endl;",
		],
		"description": "Log output to console"
	},
	"cinx": {
		"prefix": "in",
		"body": [
			"cin>>$0;"
		]
	},
	"one template for all substring problems": {
		"prefix": "sub_str",
		"body": [
			"int findSubstring(string s){",
			"        vector<int> map(128,0);",
			"        int counter; // check whether the substring is valid",
			"        int begin=0, end=0; //two pointers, one point to tail and one  head",
			"        int d; //the length of substring",
			"",
			"        for() { /* initialize the hash map here */ }",
			"",
			"        while(end<s.size()){",
			"",
			"            if(map[s[end++]]-- ?){  /* modify counter here */ }",
			"",
			"            while(/* counter condition */){ ",
			"                 ",
			"                 /* update d here if finding minimum*/",
			"",
			"                //increase begin to make it invalid/valid again",
			"                ",
			"                if(map[s[begin++]]++ ?){ /*modify counter here*/ }",
			"            }  ",
			"",
			"            /* update d here if finding maximum*/",
			"        }",
			"        return d;",
			"  }"
		],
		"description": "one template for all substring problems"
	}
}